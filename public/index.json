[{"body":"","link":"http://localhost:1313/","section":"","tags":null,"title":""},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 connect-viserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 connect-viserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; -ErrorAction SilentlyContinue 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"","link":"http://localhost:1313/tags/esxi/","section":"tags","tags":null,"title":"Esxi"},{"body":"","link":"http://localhost:1313/tags/homelab/","section":"tags","tags":null,"title":"Homelab"},{"body":"","link":"http://localhost:1313/tags/intelnuc/","section":"tags","tags":null,"title":"Intelnuc"},{"body":"","link":"http://localhost:1313/post/","section":"post","tags":[""],"title":"Posts"},{"body":"","link":"http://localhost:1313/tags/powercli/","section":"tags","tags":null,"title":"Powercli"},{"body":"","link":"http://localhost:1313/tags/powershell/","section":"tags","tags":null,"title":"Powershell"},{"body":"","link":"http://localhost:1313/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"http://localhost:1313/tags/vcf/","section":"tags","tags":null,"title":"Vcf"},{"body":"","link":"http://localhost:1313/tags/vsphere/","section":"tags","tags":null,"title":"Vsphere"},{"body":"Opensense To maintain a clear separation between my homelab and home network, I needed a firewall. A physical firewall wasnâ€™t an option since I wanted to keep the lab compact. This left me with the choice of a virtual firewall. After researching, I narrowed down the options to three main solutions: pfSense, OPNsense, and VyOS.\nPreviously, I had experience using pfSense for virtual firewalling. For my homelab, I decided to try OPNsense to gain familiarity with it. While VyOS is also on my radar for the future, my immediate focus was on getting OPNsense up and running.\nThis article focuses on configuring OPNsense for a homelab setup. I wonâ€™t delve into the detailed installation process, as many other blogs already cover that topic.\nHereâ€™s an overview of my network configuration:\nThe OPNsense virtual machine (VM) has an \u0026quot;external\u0026quot; IP address connected to the home network. On the LAN side, it uses multiple VLAN interfaces. This setup enables the creation of distinct networks, allowing me to simulate a \u0026quot;real-world\u0026quot; environment. Itâ€™s particularly useful for mirroring customer environments with various VLANs.\nAll external traffic is NATed through the external IP address to access the internet and other resources. For management and access, I rely on a Linux jump host with xrdp installed. On the OPNsense side, I configured DNAT rules to forward traffic for RDP (port 3389) and SSH (port 22) from the external IP to the internal IP of the jump host. This approach ensures I can access the lab from any device. To configure the \u0026quot;LAN\u0026quot; interface on OPNsense, I created a port group that trunks all VLANs, as shown in the screenshot below: ESXi Networking Next, letâ€™s look at the networking setup for the two ESXi hosts in the lab.\nBoth hosts utilize vSwitch0, which connects the ESXi hosts and the OPNsense VM to the home network. For internal homelab traffic, I created a Distributed Switch. This switch includes the trunk port group for OPNsense and VLAN-tagged port groups for services like vCenter, NSX Manager, and other VMs.\nUsing a Distributed Switch is essential for enabling MAC learning, a feature not available on standard vSwitches. MAC learning is particularly useful when running nested ESXi hosts. For more details on this topic, check out the blog post by my colleague Daniel Krieger, which highlights the advantages of MAC learning over promiscuous mode:\nMAC Learning is your friend\nThe internal Distributed Switch uses a direct connection between the two ESXi hosts, providing a 2.5 Gbps connection for all internal traffic, VM traffic, and vMotion. Additionally, the ESXi hosts have a vmkernel interface (vmk1) on this Distributed Switch.\nESXi USB NIC Driver If youâ€™ve examined the setup closely, you might have noticed a USB NIC attached to one of the ESXi hosts. This is because one NUC has 2 x 2.5 Gbps ports, while the other has 1 x 2.5 Gbps port plus an attached 1 Gbps USB NIC.\nTo enable the USB NIC, I installed the USB Network Native Driver for ESXi, a community-provided fling.\nYou can find more details about the USB Network Native Driver for ESXi here: https://community.broadcom.com/flings/home\n","link":"http://localhost:1313/post/network-setup/","section":"post","tags":["homelab","opensense","networking","vsphere"],"title":"Network Setup"},{"body":"","link":"http://localhost:1313/tags/networking/","section":"tags","tags":null,"title":"Networking"},{"body":"","link":"http://localhost:1313/tags/opensense/","section":"tags","tags":null,"title":"Opensense"},{"body":"My Current Lab Setup When it comes to building my home lab, my main goal is to keep things simple, low-cost, and low-overhead. Itâ€™s a place where I can experiment with new technologies, test out virtual environments, and try out different configurationsâ€”without draining my wallet or disrupting the rest of the household. Hereâ€™s a breakdown of my current setup and how Iâ€™ve optimized it for efficiency and independence.\nThe primary goal of this setup is to create an isolated environment where everything can be tested without risk to the outside network. To achieve this, all traffic within the homelab is routed through a virtual instance of OpnSense.\nAccess to the lab is strictly controlled; I connect exclusively via RDP to a Linux jumphost. This ensures that the homelab remains fully isolated from external systems and networks.\nIn a future post, I will dive deeper into the configuration of OpnSense and the internal network setup.\nThe Hardware My lab is built around two Intel NUCs, each equipped with 64GB of RAM. These compact machines provide enough horsepower to run a variety of workloads, but theyâ€™re small enough to keep everything running quietly and with minimal energy consumption.\nBut the best part? The lab is completely independent from our home network, so if something breaks or if Iâ€™m running some resource-heavy workloads, Netflix and the rest of the householdâ€™s devices still work without interruption. It's the perfect balance between experimenting with new tech and maintaining a smooth home environment.\nRoom for Growth While my lab setup is functional for now, thereâ€™s always room for improvement. Thereâ€™s still plenty of capacity for growth, and new hardware is always welcomeâ€”whether it's adding more storage, integrating additional virtual machines, or even expanding to more powerful components like additional NUCs or networking gear. But like with any hobby or project, everything in due time. Iâ€™m not in a rush to make the lab bigger or more complex; Iâ€™m more focused on optimizing what I have and gradually expanding as needed.\nWhy This Setup Works for Me This lab setup strikes the perfect balance between cost and functionality. The Intel NUCs are compact and efficient, and theyâ€™re flexible enough to run a variety of virtualized environments without creating too much overhead. Plus, the fact that the lab is completely isolated from the rest of the home network means that I can take risks, experiment, and tinker without worrying about affecting our daily activities.\nIn the future, Iâ€™m excited to keep building this lab. Whether itâ€™s adding automation, testing cloud solutions, thereâ€™s always room to improve and learn. For now, though, Iâ€™m happy with this setup and looking forward to where it can take me next.\nI created a page where I track the current status of my homelab with network diagrams, pictures and BOMs.\nSetup\n","link":"http://localhost:1313/post/home-lab-setup/","section":"post","tags":["homelab"],"title":"Home Lab Setup"},{"body":"Hardware Network BOM (Bill of Material) Component Specifications Intel NUC13 i5 2 x 32GB RAM, 1TB SATA SSD, 1TB NVMe SSD Intel NUC13 i7 2 x 32GB RAM, 1TB SATA SSD, 1TB NVMe SSD TP-Link Switch 5 Port, 1 Gbit Ethernet ","link":"http://localhost:1313/setup/","section":"","tags":["homelab","intelnuc"],"title":"Setup"},{"body":"Hey there! Iâ€™m Peter Summa, a Cloud Engineer at evoila, a tech-driven company based in Germany.\nWith a strong focus on virtualization and cloud technologies, I specialize in solutions like vSphere, NSX, Avi and Tanzu. Over the years, Iâ€™ve worked hands-on with everything from traditional VMware environments to modern cloud-native technologies like Terraform, Kubernetes, and VMware Cloud Foundation (VCF).\nThis blog is a place where I share my experiences, insights, and the lessons learned while building homelab setups, optimizing cloud environments, and deploying complex virtualized infrastructures. Whether you're looking to automate your workflows with Terraform, explore Kubernetes in a hybrid cloud setup, or dive into the intricacies of VCF, thereâ€™s something here for you.\nWhen Iâ€™m not working on client projects or tinkering with my own homelab, Iâ€™m researching the latest trends in cloud engineering or finding ways to simplify complex technical problems.\nThanks for stopping by! Feel free to reach out if you want to chat about virtualization, cloud engineering, or any of the technologies Iâ€™m passionate about. Let's connect and collaborate!\nCredly\nImpressum Die folgenden Angaben basieren auf den Vorgaben in Â§ 5 DDG:\nPeter Summa\nLindenstr. 2\n74238 Krautheim\nKontakt mail: petersumma96@gmail.com\nHaftung fÃ¼r und ÃœberprÃ¼fung von Inhalten: Durch die Vorgaben in Â§ 5 DDG bin ich als Webmaster fÃ¼r die Inhalte meines Blogs verantwortlich. Gleichzeitig befreien mich Â§Â§ 8 bis einschlieÃŸlich Â§ 10 TMG von der Verantwortung, Ã¼bermittelte oder gespeicherte fremde Inhalte zu Ã¼berwachen. Trotzdem bin ich mir meiner Pflicht bewusst, der Sperrung und Entfernung von Informationen nachzukommen, wie es geltende Gesetze vorgeben.\n","link":"http://localhost:1313/about/","section":"","tags":null,"title":"About me"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 connect-viserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 connect-viserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-viserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 connect-viserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-VIserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 connect-viserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-VIserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 Connect-viserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-VIserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-VIserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 Disconnect-viserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 4$esxipassword = \u0026#39;VMware1!\u0026#39; 5 6foreach ($esxi in $esxis) { 7 Connect-VIserver -server $esxi -user root -password $esxipassword 8 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 9 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 10 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 11 Get-VM -Name $vcentervm | Start-VM 12 } 13 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 14} 15 16while ($true) { 17 try { 18 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password \u0026#39;VMware1!\u0026#39; 19 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 20 Disconnect-VIserver * -Confirm:$false 21 exit 22 } 23 catch { 24 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 25 sleep 60 26 } 27} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with the nested ESXi Hosts, but all good\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with the nested ESXi Hosts, but all good to get a\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with the nested ESXi Hosts, but all good to get a overview and first touchpoints with VCF.\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with the nested ESXi Hosts, but all good to get a overview and first touchpoints with VCF. For\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"},{"body":"Deploying VMware Cloud Foundation (VCF) on a Small Homelab â€“ Is It Possible? Looking at the official requirements for VMware Cloud Foundation (VCF), they seem excessive for a small homelab setup. But is it still possible? Let's give it a tryâ€”the automated way!\nAutomating the VCF Deployment Deploying VCF manually is a time-consuming task. Preparing virtual ESXi hosts, configuring networking, and setting up storage can take hours. I wanted a more efficient solutionâ€”a script that could deploy VCF with just one click.\nThat's when I came across William Lamâ€™s blog post about VCF deployment. His PowerShell script automates most of the setup, making the process much easier. However, there was one major limitation:\nThe script requires a shared datastore between the ESXi hosts, typically a vSAN datastore. Since I only have two Intel NUCs, vSAN wasn't an option due to the missing third witness node. I also donâ€™t have the necessary storage for an NFS or iSCSI share. Adapting the Script for My Setup To make this work, I had to modify the script to fit my environment. The first challenge was that the script requires several inputs, which wasnâ€™t an issueâ€”until it came to selecting a datastore. The script only allows specifying one datastore, which didn't work for my setup.\nSo lets see what changes needs to be done to get the script to work on our limited setup.\nChanges I Made To successfully deploy VCF on my two-node cluster, I modified the script in several ways:\nReduced the NSX Manager size to small to save resources. 1$NSXManagerSize = \u0026#34;small\u0026#34; Lowered the nested ESXi CPU count from 12 to 8 to fit within my available hardware. 1$NestedESXiMGMTvCPU = \u0026#34;8\u0026#34; Modified the datastore variable to match my NUC-specific naming pattern, allowing me to use individual NVMe disks. 1$VMDatastorePattern = \u0026#34;*NVMe*\u0026#34; #pattern for local vmfs *NVMe Removed workload domain input, as deploying additional workload domains is impractical for my small homelab. Adjusted the deployment logic for nested ESXi hosts: I distributed the four nested ESXi hosts across my two NUCs. Odd-numbered hosts go on esxi01, while even-numbered hosts go on esxi02. This ensures an even distribution of nested ESXi hosts across the two-node cluster. 1$counter = 0 #counter to track the deployments 2 $NestedESXiHostnameToIPsForManagementDomain.GetEnumerator() | Sort-Object -Property Value | Foreach-Object { 3 $VMName = $_.Key 4 $VMIPAddress = $_.Value 5 6 $evenorodd = $counter % 2 #check if counter is odd or even 7 $vmhost = ($cluster | Get-VMhost | Sort-Object)[$evenorodd] #select esxi host 8 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) #select datastore with the pattern Ensure Cloudbuilder is also deployed on a local Datastore 1if($deployCloudBuilder -eq 1) { 2 $vmhost = ($cluster | Get-VMhost | Sort-Object)[0] 3 $datastore = ($vmhost | Get-Datastore -Name $VMDatastorePattern) Shutdown vCenter in order to save some extra resources ;) 1My-Logger \u0026#34;Going to wait 240 seconds then turning off vcenter to safe resources...\u0026#34; 2sleep 240 3 4Connect-VIServer -server $VIServer -user $VIUsername -password $VIPassword 5Get-VM -Name vcsa | Stop-VMGuest -Confirm:$false 6 7Disconnect-VIServer * -Confirm:$false For instruction how to run the script and adjust it you can have a look at the original github repo from william lam. https://github.com/lamw/vcf-automated-lab-deployment\nAs we can see both NUCs are heavy loaded with the nested ESXi Hosts, but all good to get a overview and first touchpoints with VCF. In order to run workload in\nCleanup Script for Easy Reset To make experimenting with VCF deployments easier, I also created a cleanup script. This script allows me to completely remove the VCF installation, clean up the environment, and restart vCenterâ€”ready for a fresh deployment.\nThe cleanup script performs the following tasks:\nConnects to the Intel NUCs. Stops and removes all nested ESXi hosts. Start the powered off vCenter. Removes any leftover vApp from the vCenter inventory. 1$vcentervm = \u0026#34;vcsa\u0026#34; 2$vcenterip = \u0026#34;10.10.5.10\u0026#34; 3$vcenterpw = \u0026#34;VMware1!\u0026#34; 4$esxis = @(\u0026#34;10.10.5.250\u0026#34;, \u0026#34;10.10.5.251\u0026#34;) 5$esxipassword = \u0026#39;VMware1!\u0026#39; 6 7foreach ($esxi in $esxis) { 8 Connect-VIserver -server $esxi -user root -password $esxipassword 9 Get-VM -Name vcf-* | Stop-VM -Confirm:$false 10 Get-VM -Name vcf-* | Remove-VM -DeletePermanently -Confirm:$false 11 if (Get-VM -Name $vcentervm -ErrorAction SilentlyContinue) { 12 Get-VM -Name $vcentervm | Start-VM 13 } 14 Disconnect-VIServer -server 10.10.5.250 -Confirm:$false 15} 16 17while ($true) { 18 try { 19 Connect-VIserver -server $vcenterip -user administrator@vsphere.local -password $vcenterpw 20 Get-VApp -Name \u0026#39;Nested-VCF-*\u0026#39; | Remove-VApp -DeletePermanently -Confirm:$false -ErrorAction SilentlyContinue 21 Disconnect-VIServer * -Confirm:$false 22 exit 23 } 24 catch { 25 Write-Host \u0026#34;Sleep 1min and try to connect to vcenter\u0026#34; 26 sleep 60 27 } 28} Conclusion By tweaking the script, I managed to work around the shared datastore requirement and adapt the deployment to my limited homelab resources. In an upcoming post, I'll dive deeper into the technical details of these modifications and share the full deployment process.\nFeel free to have a look at the script and try it in your homelab :)\nhttps://github.com/p3t35/vcf-automated-lab-deployment\nStay tuned! ðŸš€\n","link":"http://localhost:1313/post/automated-vcf-deployment/","section":"post","tags":["homelab","intelnuc","vcf","vsphere","esxi","powershell","powercli"],"title":"Automated VCF Deployment"}]
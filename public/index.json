[{"body":"","link":"http://localhost:1313/","section":"","tags":null,"title":""},{"body":"","link":"http://localhost:1313/tags/homelab/","section":"tags","tags":null,"title":"Homelab"},{"body":"Opensense To maintain a clear separation between my homelab and home network, I needed a firewall. A physical firewall wasn’t an option since I wanted to keep the lab compact. This left me with the choice of a virtual firewall. After researching, I narrowed down the options to three main solutions: pfSense, OPNsense, and VyOS.\nPreviously, I had experience using pfSense for virtual firewalling. For my homelab, I decided to try OPNsense to gain familiarity with it. While VyOS is also on my radar for the future, my immediate focus was on getting OPNsense up and running.\nThis article focuses on configuring OPNsense for a homelab setup. I won’t delve into the detailed installation process, as many other blogs already cover that topic.\nHere’s an overview of my network configuration:\nThe OPNsense virtual machine (VM) has an \u0026quot;external\u0026quot; IP address connected to the home network. On the LAN side, it uses multiple VLAN interfaces. This setup enables the creation of distinct networks, allowing me to simulate a \u0026quot;real-world\u0026quot; environment. It’s particularly useful for mirroring customer environments with various VLANs.\nAll external traffic is NATed through the external IP address to access the internet and other resources. For management and access, I rely on a Linux jump host with xrdp installed. On the OPNsense side, I configured DNAT rules to forward traffic for RDP (port 3389) and SSH (port 22) from the external IP to the internal IP of the jump host. This approach ensures I can access the lab from any device. To configure the \u0026quot;LAN\u0026quot; interface on OPNsense, I created a port group that trunks all VLANs, as shown in the screenshot below: ESXi Networking Next, let’s look at the networking setup for the two ESXi hosts in the lab.\nBoth hosts utilize vSwitch0, which connects the ESXi hosts and the OPNsense VM to the home network. For internal homelab traffic, I created a Distributed Switch. This switch includes the trunk port group for OPNsense and VLAN-tagged port groups for services like vCenter, NSX Manager, and other VMs.\nUsing a Distributed Switch is essential for enabling MAC learning, a feature not available on standard vSwitches. MAC learning is particularly useful when running nested ESXi hosts. For more details on this topic, check out the blog post by my colleague Daniel Krieger, which highlights the advantages of MAC learning over promiscuous mode:\nMAC Learning is your friend\nThe internal Distributed Switch uses a direct connection between the two ESXi hosts, providing a 2.5 Gbps connection for all internal traffic, VM traffic, and vMotion. Additionally, the ESXi hosts have a vmkernel interface (vmk1) on this Distributed Switch.\nESXi USB NIC Driver If you’ve examined the setup closely, you might have noticed a USB NIC attached to one of the ESXi hosts. This is because one NUC has 2 x 2.5 Gbps ports, while the other has 1 x 2.5 Gbps port plus an attached 1 Gbps USB NIC.\nTo enable the USB NIC, I installed the USB Network Native Driver for ESXi, a community-provided fling.\nYou can find more details about the USB Network Native Driver for ESXi here: https://community.broadcom.com/flings/home\n","link":"http://localhost:1313/post/network-setup/","section":"post","tags":["homelab","opensense","networking","vsphere"],"title":"Network Setup"},{"body":"","link":"http://localhost:1313/tags/networking/","section":"tags","tags":null,"title":"Networking"},{"body":"","link":"http://localhost:1313/tags/opensense/","section":"tags","tags":null,"title":"Opensense"},{"body":"","link":"http://localhost:1313/post/","section":"post","tags":[""],"title":"Posts"},{"body":"","link":"http://localhost:1313/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"http://localhost:1313/tags/vsphere/","section":"tags","tags":null,"title":"Vsphere"},{"body":"My Current Lab Setup When it comes to building my home lab, my main goal is to keep things simple, low-cost, and low-overhead. It’s a place where I can experiment with new technologies, test out virtual environments, and try out different configurations—without draining my wallet or disrupting the rest of the household. Here’s a breakdown of my current setup and how I’ve optimized it for efficiency and independence.\nThe primary goal of this setup is to create an isolated environment where everything can be tested without risk to the outside network. To achieve this, all traffic within the homelab is routed through a virtual instance of OpnSense.\nAccess to the lab is strictly controlled; I connect exclusively via RDP to a Linux jumphost. This ensures that the homelab remains fully isolated from external systems and networks.\nIn a future post, I will dive deeper into the configuration of OpnSense and the internal network setup.\nThe Hardware My lab is built around two Intel NUCs, each equipped with 64GB of RAM. These compact machines provide enough horsepower to run a variety of workloads, but they’re small enough to keep everything running quietly and with minimal energy consumption.\nBut the best part? The lab is completely independent from our home network, so if something breaks or if I’m running some resource-heavy workloads, Netflix and the rest of the household’s devices still work without interruption. It's the perfect balance between experimenting with new tech and maintaining a smooth home environment.\nRoom for Growth While my lab setup is functional for now, there’s always room for improvement. There’s still plenty of capacity for growth, and new hardware is always welcome—whether it's adding more storage, integrating additional virtual machines, or even expanding to more powerful components like additional NUCs or networking gear. But like with any hobby or project, everything in due time. I’m not in a rush to make the lab bigger or more complex; I’m more focused on optimizing what I have and gradually expanding as needed.\nWhy This Setup Works for Me This lab setup strikes the perfect balance between cost and functionality. The Intel NUCs are compact and efficient, and they’re flexible enough to run a variety of virtualized environments without creating too much overhead. Plus, the fact that the lab is completely isolated from the rest of the home network means that I can take risks, experiment, and tinker without worrying about affecting our daily activities.\nIn the future, I’m excited to keep building this lab. Whether it’s adding automation, testing cloud solutions, there’s always room to improve and learn. For now, though, I’m happy with this setup and looking forward to where it can take me next.\nI created a page where I track the current status of my homelab with network diagrams, pictures and BOMs.\nSetup\n","link":"http://localhost:1313/post/home-lab-setup/","section":"post","tags":["homelab"],"title":"Home Lab Setup"},{"body":"","link":"http://localhost:1313/tags/intelnuc/","section":"tags","tags":null,"title":"Intelnuc"},{"body":"Hardware Network BOM (Bill of Material) Component Specifications Intel NUC13 i5 2 x 32GB RAM, 1TB SATA SSD, 1TB NVMe SSD Intel NUC13 i7 2 x 32GB RAM, 1TB SATA SSD, 1TB NVMe SSD TP-Link Switch 5 Port, 1 Gbit Ethernet ","link":"http://localhost:1313/setup/","section":"","tags":["homelab","intelnuc"],"title":"Setup"},{"body":"Hey there! I’m Peter Summa, a Cloud Engineer at evoila, a tech-driven company based in Germany.\nWith a strong focus on virtualization and cloud technologies, I specialize in solutions like vSphere, NSX, Avi and Tanzu. Over the years, I’ve worked hands-on with everything from traditional VMware environments to modern cloud-native technologies like Terraform, Kubernetes, and VMware Cloud Foundation (VCF).\nThis blog is a place where I share my experiences, insights, and the lessons learned while building homelab setups, optimizing cloud environments, and deploying complex virtualized infrastructures. Whether you're looking to automate your workflows with Terraform, explore Kubernetes in a hybrid cloud setup, or dive into the intricacies of VCF, there’s something here for you.\nWhen I’m not working on client projects or tinkering with my own homelab, I’m researching the latest trends in cloud engineering or finding ways to simplify complex technical problems.\nThanks for stopping by! Feel free to reach out if you want to chat about virtualization, cloud engineering, or any of the technologies I’m passionate about. Let's connect and collaborate!\nCredly\nImpressum Die folgenden Angaben basieren auf den Vorgaben in § 5 DDG:\nPeter Summa\nLindenstr. 2\n74238 Krautheim\nKontakt mail: petersumma96@gmail.com\nHaftung für und Überprüfung von Inhalten: Durch die Vorgaben in § 5 DDG bin ich als Webmaster für die Inhalte meines Blogs verantwortlich. Gleichzeitig befreien mich §§ 8 bis einschließlich § 10 TMG von der Verantwortung, übermittelte oder gespeicherte fremde Inhalte zu überwachen. Trotzdem bin ich mir meiner Pflicht bewusst, der Sperrung und Entfernung von Informationen nachzukommen, wie es geltende Gesetze vorgeben.\n","link":"http://localhost:1313/about/","section":"","tags":null,"title":"About me"}]